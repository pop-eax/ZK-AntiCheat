{"noir_version":"1.0.0-beta.7+24c053fba747770cf8d3f813d22cfa003714dfb6","hash":"15870945514060255080","abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+2aaU/bQBCGDTgBB1Io9IKCxE9wnIQEqR+Qyn3f9+VcUr9UVdUfkJ/dL62KxY6ZLDttUeZVI5WVIsfZx89MZtdrO9DnPbQ+s/XNtt+T24LZht21QhJzFhojLmG8tTlQTUDeUg3jjYoYbwOUbxyD6htivFVQHQoVkBeUb9jCeJsNjLcMOo+jKsYbg+obRxjvHGj+NkF1QK0PqOtbqwzKFzR/UdfNuInxRqBxC0Hj1gSNWxm17oDmQ6uA8dYfzYffNrpZ/2m2gdn2s/4BteTCQmDF1fRXw7ly4Ph+ivkXA+bU90cF8vuY/MNB41lsd/o9K+6AxdnHcGaJMUuM4e5lxiwLzApjVgRmlTGrArPGmDWBWWfMusBsMGZDYDYZsykwW4zZEphtxmwLzA5jdgRmlzG7ArPHmD2B2WfMvsAcMOZAYA4ZcygwR4w5EphjxhwLzAljTgTmlDGnAnPGmDOBOWfMucBcMOZCYC4ZcykwV4y5EphrxlwLzA1jbgTmljG3AhMzJhaYGmNqAlNnTF1gGoxpWEyevae2aBhaRxHXsWpYKmPX6SjMW3Xw2Pek2BlM7EKfFc/zOq8RnhU/5yGvifc/7vF4lI9dHxrrPDHth3zsPr/9+HtQX4b10fgO3b3mGeeaW8QtsvdL5j2NGfK+BzXfkzbhyJ/HStpg20sb1WOAfUZ1pToPcd7qC1if3+6MkzP7PovDXZRHxuI/mv1Rs82yY+j4MUf8rBW/I2/HZ3ZdAgcfOPjs3euDeT9sXskc+k7HeI/Ps+S1YPbDrlql5lrT9PxR5Fq39Pxzaf5ZjH+e/IMYf5P8Qxh/ifwBxF+MyZ/D5J8+Gw1j5n86P0cw/nT+5CH+qE7+F5j6p/5RjD+9ho1h/BXyv8SMb3p+jWPyr5J/AuIvpr9tvML40/PrNab+IfnfYPzp/HyL8af1f4fxp/N/EjO+6fycwuTfoPvu995Ds5+Jptnneve/pfm/fSai+DkrV9Qz0bSVj10f/tyT9M04ch1z9Nn3mDOOODOOOC6Xr+jKKLqyiq5BRdeQokuz9kGP5pVTdA33qEvzO44oujTHMd+jeb1QdI0qujTXnDFF10tF17iiq1fXwglF1ytFV6+ej5rzS3MtfK3o0lwnenXeP99j/rv1/vke82muN4ouzXF8q+jSnKua9xOa9dJcVzXPoV5dJzSvtZq115xfmnlpPvP9D89W7xRdmueQ5rn9/Dz0NNekomsK4HL9HT5pC2YbdtkoV9+Ra78jV+Jd/x/j+i14hLFfvn76/M2zGg9Mcv6e+meFBFat4wcEr+3n+7N/6F91uJLFlyai3+6Mv2A+D7toler94CSN/mEl43X+E5Jnxc9Y/A+zz3/Qo63fRZ6tSlxoFeNWXI4bjVI9Hrf8SetndfoFV5Qx4rI5AAA=","debug_symbols":"ndXdSuNQFIbhe8lxDrq+/ZO9vRURiTVKIKQltsIgvfdJXG91BhHEky7Tdj0J0jd5ax6Hh/Pz/Tg/HV6am9u35mEZp2l8vp8O+/40Hub13bdmt71066u1TWc+5CP4iD6Sj+yj81F81PdRXCmuFFeKK8WV4kpxpbhSXCmuVFeqK9WV6kp1pbpSXamuVFeqK7bbMY0pZmBGZmJmZscsTDzDMzzDMzzDMzzDMzzDMzzhCU94whOe8IQnPOEJL+AFvIAX8AJewAt4AS/gBbyIF/EiXsSLeBEv4kW8iBfxEl7CS3gJL+ElvISX8BJewst4GS/jZbyMl/EyXsbLeBmPBIwGjAiMCowMjA6MEIwSjBSMFowYjBqMHIwejCCMIowkjCaMKIwqjCyMLowwjDKMNIw2jDiMOow8jD5EH6IP0YfoQ/Qh+hB9iD5EH6IP0YfoQ/Qh+hB9iD5EH6IP0YfoQ/Qh+hB9iD5EH6IP0YfoQ/Qh+hB9iD5EH6IP0YfoQ/Qh+hB9iD5EH6IP0Ye2PrTNyEzM1dPl0jbXu+/9aRmG7eb7z+14vUkf+2WYT83NfJ6mtnntp/P7l16O/fw+T/2yfrprm2F+XOcKPo3TsP11aT+3d9+vlmosV4WPdemn+13s2O/K7hf7ObJe8sd2+v/qw/fb633revnrretTsPrT86d8PX/33fnTb/57d+tRvx+XL4/X7SJf+2XsH6Zhe2/bOs/761fWw9Of4/WT6zP6uBz2w+N5GTbu80G9/rhuU9fm7m57NK0HiqVVCneX7QL+Ag==","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"fn main() {\n    let one: [u8; 4] = 1.to_be_bytes();\n    println(std::hash::blake3(one));    \n}\n","path":"/home/user/code/projects/anticheatz/circuits/commitReveal/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained"]}