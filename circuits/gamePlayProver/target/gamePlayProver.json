{"noir_version":"1.0.0-beta.11+fd3925aaaeb76c76319f44590d135498ef41ea6c","hash":"18270183485029304043","abi":{"parameters":[{"name":"verification_key","type":{"kind":"array","length":128,"type":{"kind":"field"}},"visibility":"public"},{"name":"proof1","type":{"kind":"array","length":456,"type":{"kind":"field"}},"visibility":"public"},{"name":"public_inputs1","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"proof2","type":{"kind":"array","length":456,"type":{"kind":"field"}},"visibility":"public"},{"name":"public_inputs2","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"accumulator","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"tZJNjoQgEEbvUmsX/IjYfZXJxKBih4SgoWGSifHuUxpxdEGnN70RoXiPL5WaoddtfDTGDeMT7l8ztN5Yax6NHTsVzOjwdF4KSNsmeK3xCE51pCbltQtwd9HaAn6Ujdul56TctgblsUoK0K7HFYWDsXr9W4p/muTRUtQ7LG7VgYsrT/M8ZxXbBZyX4jAw9m6CiiSBLEkuAf9kAilSA2VNcwnEiwQiBSjpqYfywld5nrH6tgsYJyxnkHkDpUcPKK3FxfCNO9UZf5k8IPhWAXT7Mgy+rHJvVGv1PplDdN1pUMPvlCpplCc/drqPXq/qrYaP/QE=","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"use poseidon::poseidon2::Poseidon2::hash;\n\nglobal HONK_VK_SIZE: u32 = 128;\nglobal HONK_PROOF_SIZE: u32 = 456;\nglobal HONK_IDENTIFIER: u32 = 1;\n\nfn main(\n    verification_key: pub [Field; HONK_VK_SIZE],\n    proof1: pub [Field; HONK_PROOF_SIZE],\n    public_inputs1: pub [Field; 2],\n    proof2: pub [Field; HONK_PROOF_SIZE],\n    public_inputs2: pub [Field; 2],\n    accumulator: pub Field,\n    // new_root: pub Field,\n) {\n    let mut r: Field = accumulator;\n    std::verify_proof_with_type(\n        verification_key,\n        proof1,\n        public_inputs1,\n        0x0,\n        HONK_IDENTIFIER,\n    );\n    std::verify_proof_with_type(\n        verification_key,\n        proof2,\n        public_inputs2,\n        0x0,\n        HONK_IDENTIFIER,\n    );\n    r = hash([r, public_inputs1[0]], 2);\n\n    // assert(r == new_root);\n}\n","path":"/home/user/code/projects/fairfy/circuits/gamePlayProver/src/main.nr"}},"names":["main"],"brillig_names":[]}